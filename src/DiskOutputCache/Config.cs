//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DiskOutputCache {
    using System;
    using System.Configuration;
    
    
    public class CachedUrlsElement : System.Configuration.ConfigurationElement {
        
        [System.Configuration.ConfigurationProperty("path", DefaultValue="", IsKey=true, IsRequired=true)]
        public string Path {
            get {
                return ((string)(base["path"]));
            }
            set {
                base["path"] = value;
            }
        }
        
        [System.Configuration.ConfigurationProperty("duration", DefaultValue="00:00:00", IsKey=false, IsRequired=false)]
        public System.TimeSpan Duration {
            get {
                return ((System.TimeSpan)(base["duration"]));
            }
            set {
                base["duration"] = value;
            }
        }
        
        [System.Configuration.ConfigurationProperty("verbs", DefaultValue="GET", IsKey=false, IsRequired=false)]
        public string Verbs {
            get {
                return ((string)(base["verbs"]));
            }
            set {
                base["verbs"] = value;
            }
        }
        
        [System.Configuration.ConfigurationProperty("varyBy", DefaultValue="", IsKey=false, IsRequired=false)]
        public string VaryBy {
            get {
                return ((string)(base["varyBy"]));
            }
            set {
                base["varyBy"] = value;
            }
        }
        
        [System.Configuration.ConfigurationProperty("emptyQueryStringOnly", DefaultValue=false, IsKey=false, IsRequired=false)]
        public bool EmptyQueryStringOnly {
            get {
                return ((bool)(base["emptyQueryStringOnly"]));
            }
            set {
                base["emptyQueryStringOnly"] = value;
            }
        }
        
        [System.Configuration.ConfigurationProperty("emptyPathInfoOnly", DefaultValue=false, IsKey=false, IsRequired=false)]
        public bool EmptyPathInfoOnly {
            get {
                return ((bool)(base["emptyPathInfoOnly"]));
            }
            set {
                base["emptyPathInfoOnly"] = value;
            }
        }
        
        [System.Configuration.ConfigurationProperty("serveFromMemory", DefaultValue=false, IsKey=false, IsRequired=false)]
        public bool ServeFromMemory {
            get {
                return ((bool)(base["serveFromMemory"]));
            }
            set {
                base["serveFromMemory"] = value;
            }
        }
    }
    
    [System.Configuration.ConfigurationCollectionAttribute(typeof(CachedUrlsElement))]
    public class CachedUrlsCollection : System.Configuration.ConfigurationElementCollection {
        
        protected override System.Configuration.ConfigurationElement CreateNewElement() {
            return new CachedUrlsElement();
        }
        
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) {
            return ((CachedUrlsElement)(element)).Path;
        }
        
        public void Add(CachedUrlsElement element) {
            this.BaseAdd(element);
        }
        
        public void Remove(string key) {
            this.BaseRemove(key);
        }
        
        public void Clear() {
            this.BaseClear();
        }
    }
    
    public class DiskOutputCacheSettingsSection : System.Configuration.ConfigurationSection {
        
        [System.Configuration.ConfigurationProperty("location", DefaultValue="", IsKey=false, IsRequired=false)]
        public string Location {
            get {
                return ((string)(base["location"]));
            }
            set {
                base["location"] = value;
            }
        }
        
        [System.Configuration.ConfigurationProperty("fileRemovalDelay", DefaultValue="00:00:15", IsKey=false, IsRequired=false)]
        public System.TimeSpan FileRemovalDelay {
            get {
                return ((System.TimeSpan)(base["fileRemovalDelay"]));
            }
            set {
                base["fileRemovalDelay"] = value;
            }
        }
        
        [System.Configuration.ConfigurationProperty("fileValidationDelay", DefaultValue="00:00:05", IsKey=false, IsRequired=false)]
        public System.TimeSpan FileValidationDelay {
            get {
                return ((System.TimeSpan)(base["fileValidationDelay"]));
            }
            set {
                base["fileValidationDelay"] = value;
            }
        }
        
        [System.Configuration.ConfigurationProperty("fileScavangingDelay", DefaultValue="00:10:00", IsKey=false, IsRequired=false)]
        public System.TimeSpan FileScavangingDelay {
            get {
                return ((System.TimeSpan)(base["fileScavangingDelay"]));
            }
            set {
                base["fileScavangingDelay"] = value;
            }
        }
        
        [System.Configuration.ConfigurationProperty("varyByLimitPerUrl", DefaultValue=256, IsKey=false, IsRequired=false)]
        public int VaryByLimitPerUrl {
            get {
                return ((int)(base["varyByLimitPerUrl"]));
            }
            set {
                base["varyByLimitPerUrl"] = value;
            }
        }

        [System.Configuration.ConfigurationProperty("cachedUrls")]
        public CachedUrlsCollection CachedUrls
        {
            get
            {
                return ((CachedUrlsCollection)(base["cachedUrls"]));
            }
        }

        [System.Configuration.ConfigurationProperty("imagesCacheDuration", DefaultValue = "00:10:00", IsKey = false, IsRequired = false)]
        public System.TimeSpan ImagesCacheDuration
        {
            get
            {
                return ((System.TimeSpan)(base["imagesCacheDuration"]));
            }
            set
            {
                base["imagesCacheDuration"] = value;
            }
        }
    }
}
